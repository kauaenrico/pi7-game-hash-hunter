import React, { useEffect, useRef, useState } from 'react';
import { GameEngine } from '../../game/engine/GameEngine';
import { GameStatus } from './GameStatus';
import { GameOverlay } from './GameOverlay';
import { SecurityTipPopup } from './SecurityTipPopup';
import { PauseOverlay } from './PauseOverlay';
import './Game.css';

let gameEngine: GameEngine | null = null;

// Dicas de seguran√ßa (copiado de js/security_tips.js)
const securityTips = [
  "Use senhas longas e aleat√≥rias para maior seguran√ßa.",
  "Nunca reutilize a mesma senha em v√°rias contas.",
  "Ative sempre a autentica√ß√£o em dois fatores (2FA).",
  "Use um gerenciador de senhas para gerar e armazenar credenciais.",
  "Evite usar informa√ß√µes pessoais em suas senhas.",
  "Altere suas senhas periodicamente, especialmente ap√≥s vazamentos.",
  "Mantenha seu sistema operacional sempre atualizado.",
  "Atualize regularmente seus aplicativos e navegadores.",
  "Execute varreduras peri√≥dicas de malware no seu dispositivo.",
  "Mantenha seu antiv√≠rus atualizado e ativo.",
  "Fa√ßa backup regular dos seus dados importantes.",
  "Verifique sempre o certificado HTTPS de sites sens√≠veis.",
  "Desconfie de e-mails com urg√™ncia excessiva ou ofertas muito boas.",
  "Evite clicar em links encurtados de remetentes desconhecidos.",
  "Use uma VPN ao acessar redes Wi-Fi p√∫blicas.",
  "Verifique a URL dos sites antes de inserir dados sens√≠veis.",
  "Criptografe seus dados sens√≠veis quando poss√≠vel.",
  "N√£o compartilhe informa√ß√µes pessoais em redes sociais.",
  "Use conex√µes seguras (HTTPS) para transa√ß√µes online.",
  "Mantenha backups em diferentes locais (nuvem e local).",
  "Revise regularmente as permiss√µes dos seus aplicativos.",
  "Desconfie de mensagens pedindo informa√ß√µes pessoais.",
  "Verifique a autenticidade de sites antes de fazer downloads.",
  "Mantenha seus dispositivos f√≠sicos seguros e protegidos.",
  "Use bloqueio de tela em todos os seus dispositivos.",
  "Eduque sua fam√≠lia sobre pr√°ticas de seguran√ßa digital.",
  "Configure seu roteador com senha forte e criptografia WPA3.",
  "Desative recursos de rede n√£o utilizados (Bluetooth, Wi-Fi).",
  "Use firewalls para proteger sua rede dom√©stica.",
  "Monitore regularmente as conex√µes ativas em sua rede.",
  "Evite usar redes Wi-Fi p√∫blicas para transa√ß√µes sens√≠veis.",
  "Revise regularmente as configura√ß√µes de privacidade das suas contas.",
  "Use navegadores com prote√ß√£o contra rastreamento.",
  "Limpe regularmente o cache e cookies do navegador.",
  "Considere usar buscadores que priorizam a privacidade.",
  "Seja seletivo ao compartilhar sua localiza√ß√£o com apps.",
  "Ative a localiza√ß√£o remota do seu dispositivo.",
  "Configure o apagamento remoto em caso de perda.",
  "Mantenha o GPS desativado quando n√£o estiver em uso.",
  "Use PIN ou biometria para desbloquear seu dispositivo.",
  "Revise as permiss√µes dos aplicativos instalados."
];
function getRandomTip() {
  return securityTips[Math.floor(Math.random() * securityTips.length)];
}

// Textos de feedback (copiado de js/texts.js)
const gameOverMessages = [
  "Virus0x te alcan√ßou! A rede falhou.",
  "Seguran√ßa comprometida! Tente novamente.",
  "O invasor venceu desta vez. Reforce suas defesas!"
];
const levelCompleteMessages = [
  "Firewall erguido com sucesso!",
  "Sistema protegido.",
  "Hashes 100% validados."
];
const levelCompleteTips = [
  "DICA: Use senhas longas e aleat√≥rias.",
  "DICA: Ative autentica√ß√£o em dois fatores.",
  "DICA: Nunca reutilize a mesma senha em v√°rias contas."
];
function getRandom(arr) {
  return arr[Math.floor(Math.random() * arr.length)];
}

export const Game: React.FC = () => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [gameState, setGameState] = useState({
    level: 1,
    hashes: 0,
    totalHashes: 0,
    status: 'Pronto',
    time: '00:00'
  });
  const [showStartScreen, setShowStartScreen] = useState(true);
  const [showGameOver, setShowGameOver] = useState(false);
  const [showLevelComplete, setShowLevelComplete] = useState(false);
  const [gameOverMessage, setGameOverMessage] = useState('');
  const [levelCompleteMessage, setLevelCompleteMessage] = useState('');
  const [securityTip, setSecurityTip] = useState('');
  const [showSecurityTip, setShowSecurityTip] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  const [canvasSize, setCanvasSize] = useState(600);
  const [showTipPopup, setShowTipPopup] = useState(false);
  const [tipPopupText, setTipPopupText] = useState('');
  const [gameReady, setGameReady] = useState(false);
  const [showCredits, setShowCredits] = useState(false);

  useEffect(() => {
    // Responsividade do canvas
    function handleResize() {
      const min = Math.min(window.innerWidth, window.innerHeight) - (isMobile ? 32 : 64);
      setCanvasSize(Math.max(240, Math.min(600, min)));
      setIsMobile(window.innerWidth < 700);
    }
    handleResize();
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, [isMobile]);

  useEffect(() => {
    // Bloquear scroll e zoom no mobile
    document.body.style.overflow = 'hidden';
    document.addEventListener('touchmove', e => e.preventDefault(), { passive: false });
    document.addEventListener('gesturestart', e => e.preventDefault(), { passive: false });
    document.addEventListener('dblclick', e => e.preventDefault(), { passive: false });
    return () => {
      document.body.style.overflow = '';
      document.removeEventListener('touchmove', e => e.preventDefault());
      document.removeEventListener('gesturestart', e => e.preventDefault());
      document.removeEventListener('dblclick', e => e.preventDefault());
    };
  }, []);

  useEffect(() => {
    if (!gameReady || !canvasRef.current) return;
    gameEngine = new GameEngine(canvasRef.current, {
      onGameStateChange: setGameState,
      onGameOver: (message) => {
        setGameOverMessage(getRandom(gameOverMessages));
        setShowGameOver(true);
      },
      onLevelComplete: (message, tip) => {
        setLevelCompleteMessage(getRandom(levelCompleteMessages));
        setSecurityTip(getRandom(levelCompleteTips));
        setShowLevelComplete(true);
      },
      onSecurityTip: (tip) => {
        setSecurityTip(tip);
        setShowSecurityTip(true);
      },
      onHashCollected: showHashTip
    });
    gameEngine.setOnNextLevel(() => {
      setShowLevelComplete(true);
    });
    return () => {
      gameEngine?.cleanup();
    };
  }, [gameReady, canvasSize]);

  const handleStartGame = () => {
    setShowStartScreen(false);
    setShowGameOver(false);
    setShowLevelComplete(false);
    setGameReady(true);
  };

  const handleRetry = () => {
    setShowGameOver(false);
    setShowLevelComplete(false);
    setGameReady(false);
    setTimeout(() => setGameReady(true), 50);
  };

  const handleNextLevel = () => {
    setShowLevelComplete(false);
    gameEngine?.nextLevel();
  };

  function showHashTip() {
    setTipPopupText(getRandomTip());
    setShowTipPopup(true);
    gameEngine?.pause();
  }
  function handleContinueTip() {
    setShowTipPopup(false);
    setTimeout(() => gameEngine?.resume(), 100);
  }

  // Setas virtuais estilo anterior
  const VirtualArrows: React.FC<{ onMove: (dir: string) => void }> = ({ onMove }) => (
    <div className="virtual-arrows-row">
      <div className="virtual-arrows-old">
        <button className="arrow-old up" onPointerDown={() => onMove('arrowup')}>‚ñ≤</button>
        <div>
          <button className="arrow-old left" onPointerDown={() => onMove('arrowleft')}>‚óÄ</button>
          <button className="arrow-old down" onPointerDown={() => onMove('arrowdown')}>‚ñº</button>
          <button className="arrow-old right" onPointerDown={() => onMove('arrowright')}>‚ñ∂</button>
        </div>
      </div>
    </div>
  );

  // P√°gina inicial customizada
  if (showStartScreen) {
    return (
      <div className="game-container font-tech">
        <div className="start-menu">
          <h1 className="start-title">Hash Hunter</h1>
          <p className="start-desc">Proteja a rede, colete os hashes e fuja do v√≠rus!</p>
          <button className="start-btn" onClick={handleStartGame}>INICIAR MISS√ÉO</button>
          <button className="credits-btn" onClick={() => setShowCredits(true)}>CR√âDITOS</button>
        </div>
        {showCredits && (
          <div className="credits-popup">
            <div className="credits-content">
              <h2>Cr√©ditos</h2>
              <p>Jogo desenvolvido para fins educacionais.<br />Inspirado em temas de seguran√ßa da informa√ß√£o.<br />Desenvolvedor: Seu Nome Aqui</p>
              <button className="continue-button" onClick={() => setShowCredits(false)}>VOLTAR</button>
            </div>
          </div>
        )}
      </div>
    );
  }

  return (
    <div className="game-container font-tech">
      <h1 id="gameTitle">Hash Hunter</h1>
      <div className={`canvas-container center-mobile${isMobile ? ' mobile-stack' : ''}`}>
        <canvas ref={canvasRef} width={canvasSize} height={canvasSize} style={{ width: canvasSize, height: canvasSize, display: gameReady ? 'block' : 'none' }} />
        <GameOverlay
          showStartScreen={false}
          showGameOver={showGameOver}
          showLevelComplete={showLevelComplete}
          gameOverMessage={gameOverMessage}
          levelCompleteMessage={levelCompleteMessage}
          onStart={handleStartGame}
          onRetry={handleRetry}
          onNextLevel={handleNextLevel}
        />
        {showTipPopup && (
          <div className="security-tip-popup show">
            <span className="tip-icon">üõ°Ô∏è</span>
            <span className="tip-content">{tipPopupText}</span>
            <button className="continue-button" onClick={handleContinueTip}>CONTINUAR</button>
          </div>
        )}
      </div>
      {isMobile && gameReady && (
        <VirtualArrows onMove={dir => gameEngine?.movePlayerExternally(dir)} />
      )}
      <GameStatus {...gameState} />
      <PauseOverlay />
      <SecurityTipPopup
        show={showSecurityTip}
        tip={securityTip}
        onClose={() => setShowSecurityTip(false)}
      />
    </div>
  );
}; 